plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy", "recall"))
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", precision", "accuracy", "recall"))
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall"))
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall"))
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall"))
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall", "decection rate"))
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall", "Detection Rate"))
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall", "Detection rate"))
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("AUC", "precision", "accuracy", "recall", "detection rate"))
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("auc", "precision", "accuracy", "recall", "detection rate"))
plot(comp, titanic[, 1], titanic[, -1], plot.type="roc"
)
devtools::load_all(".")
warnings()
source('~/BestModel/R/StackingHelpers.R')
source('~/BestModel/R/StackingHelpers.R')
use_package_doc()
library(roxygen2)
library(devtools)
library(roxygen2)
use_package_doc()
library(BestModel)
?getModelInfo
install(BestModel)
?CreateModelComparison
?GetModelComparison
?GetModelComparisons
?GetModelComparisons
?GetTrainingInfo
?plot.ModelComparison
titanic <- PrepareNumericTitanic()
# create the models
comp <- GetModelComparisons(titanic[, -1], titanic[, 1], model.list = "all")
# predict the values for the dataset
pred.list <- predict(comp, titanic[, -1])
# check that there are the same number of predictions as there are models
expect_equal(length(comp$model.list), length(pred.list))
# predict the values for the dataset
pred.list <- predict(comp, titanic[, -1])
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
devtools::load_all(".")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
class(plot.type)
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type=3.0)
devtools::load_all(".")
svm.radial = svm(as.factor(Survived)~., data = titanic,, kernel = "radial", cost = 10, scale = FALSE, probability=TRUE)
pred_svm <- predict(svmfit, newdata = titanic[, -1], type="response",decision.values=TRUE)
svm.radial = svm(as.factor(Survived)~., data = titanic,, kernel = "radial", cost = 10, scale = FALSE, probability=TRUE)
pred_svm <- predict(svmfit, newdata = titanic[, -1], type="response",decision.values=TRUE)
pred_svm <- predict(svm.radial, newdata = titanic[, -1], type="response",decision.values=TRUE)
pred_svm
svmmodel.probs<-attr(pred_svm,"decision.values")
svmmodel.probs
class(svm.radial)
cancer
cancer$model_list$svmLinear
class(cancer$model_list$svmLinear)
svmmodel.probs
round(svmmodel.probs)
round(svmmodel.probs, digits=0
)
round(svmmodel.probs, signif=0)
signif(svmmodel.probs, digits=0)
# prepare the dataset
titanic <- PrepareNumericTitanic()
titanic$Survived
# create the models
library(e1071)
naive.bayes = e1071::naiveBayes(as.factor(Survived)~., threshold = 0.001, eps = 5, data=titanic)
library(randomForest)
rforest = randomForest(formula = as.factor(Survived)~., data = titanic, type=raw, cutoff=c(.45, .55))
library(nnet)
capture.output(neural.net <- nnet(as.factor(Survived) ~ ., data=titanic,
size=10,decay=5e-2, maxit=50))
library(glmnet)
matrix.glmnet <- data.matrix(titanic[, -1])
glmnet <- glmnet(x=matrix.glmnet, y=factor(titanic$Survived), family = "binomial", lambda=.02)
svm.radial = svm(as.factor(Survived)~., data = titanic,, kernel = "radial", cost = 10, scale = FALSE, probability=TRUE)
models <- list(naive.bayes, rforest, neural.net, glmnet, svm.radial)
names(models) <- c("naive.bayes", "rforest", "neural.net", "glmnet", "svm.radial")
comp <- ModelComparison(models, F)
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
metric.df
metrics.for.plot
names(object$model.list)
length(pred.basic)
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred.basic
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred.basic <- predict(comp, titanic[, -1]))
pred.basic <- predict(comp, titanic[, -1])
View(pred.basic)
pred.basic <- predict(comp, titanic[, -1])
devtools::load_all(".")
pred.basic <- predict(comp, titanic[, -1])
pred.basic <- predict(comp, titanic[, -1])
length(object$model.list)
model
svm.pred
class(attr(svm.pred,"decision.values"))
attr(svm.pred,"decision.values")
svm.pred <- predict(model, data.matrix(newdata), type="response", decision.values=TRUE)
attr(svm.pred,"decision.values")
pred.basic <- predict(comp, titanic[, -1])
n
c
c
pred.basic <- predict(comp, titanic[, -1])
pred.basic <- predict(comp, titanic[, -1])
pred.basic
pred.basic <- predict(comp, titanic[, -1])
svm.pred
devtools::load_all(".")
pred.basic <- predict(comp, titanic[, -1])
pred.basic <- predict(comp, titanic[, -1])
pred.basic <- predict(comp, titanic[, -1])
svm.pred
svm.pred
attr(svm.pred, "decision.values"")
asd
)
)
]
asdf;lk9
""
attr(svm.pred, "decision.values")
devtools::load_all(".")
pred.basic <- predict(comp, titanic[, -1])
View(pred.basic)
View(pred.basic)
pred.basic[[5]]
pred.basic <- predict(comp, titanic[, -1])
pred.basic <- predict(comp, titanic[, -1])
svm.pred
c
pred.basic[[5]]
ab <- pred.basic[[5]]
ab <- ifelse(ab<0.1,NA,ab)
ab
ab <- pred.basic[[5]]
ab <- ifelse(ab<0.1,0,ab)
ab
ab <- ifelse(ab<-0.1,0,ab)
ab <- ifelse(ab>0,1,ab)
ab
ab
ab <- pred.basic[[5]]
ab <- ifelse(ab>0,1,ab)
ab
ab <- ifelse(ab<0,0,ab)
ab
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred
labels
pred
pred
pred
pred
pred.basic <- predict(comp, titanic[, -1])
sv.pred
attr(svm.pred)
attributes(svm.pred)
svm.pred
attributes(svm.pred)
attr(svm.pred, "levels")
svm.pred[[1]]
svm.pred[[2]]
svm.pred[[3]]
svm.pred[[4
]]
devtools::load_all(".")
pred.basic <- predict(comp, titanic[, -1])
svm.pred[1:nrow(newdata)]
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# multiple metrics, two word metrics, uncapitalized
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy",
"recall", "detection rate"))
# multiple metrics, two word metrics, uncapitalized
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy",
"recall", "detection rate"))
# multiple metrics, two word metrics, uncapitalized
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy",
"recall", "detection rate"))
names(pred.basic)
devtools::load_all(".")
# multiple metrics, two word metrics, uncapitalized
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy",
"recall", "detection rate"))
names(pred.basic)
devtools::load_all(".")
# multiple metrics, two word metrics, uncapitalized
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy",
"recall", "detection rate"))
devtools::load_all(".")
# multiple metrics, two word metrics, uncapitalized
plot(comp, titanic[, 1], titanic[, -1], plot.type=list("precision", "accuracy",
"recall", "detection rate"))
names(pred.basic)
pred.basic[[5]]
svm.radial = svm(as.factor(Survived)~., data = titanic, kernel = "radial", probability=TRUE)
svm.radial = svm(as.factor(Survived)~., data = titanic, kernel = "radial", probability=TRUE)
models <- list(naive.bayes, rforest, neural.net, glmnet, svm.radial)
names(models) <- c("naive.bayes", "rforest", "neural.net", "glmnet", "svm.radial")
comp <- ModelComparison(models, F)
pred.basic <- predict(comp, titanic[, -1])
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
ind.pred
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
ind.pred
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
svm.pred
attr(svm.pred, "decision.values")
ind.pred
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
GetSVMScale(ind.pred)
length(levels(round(ind.pred))
)
levels(round(ind.pred))
ind.pred
class(ind.pred)
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
ind.pred
pred
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
pred
class(pred)
pred <- unlist(pred)
class(pred)
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
class(pred)
pred
pred
round(pred)
levels(round(pred))
levels(as.factors(round(pred)))
levels(as.factor(round(pred)))
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
YourData = ind.pred
yourData = ind.pred
preProcValues <- preProcess(yourData, method = "range")
dataScaled <- predict(preProcValues, yourData)
dataScaled
devtools::load_all(".")
source('~/BestModel/R/Visualization.R')
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
class(ind.pred)
titanic <- PrepareNumericTitanic()
titanic$Survived
# create the models
library(e1071)
naive.bayes = e1071::naiveBayes(as.factor(Survived)~., threshold = 0.001, eps = 5, data=titanic)
library(randomForest)
rforest = randomForest(formula = as.factor(Survived)~., data = titanic, type=raw, cutoff=c(.45, .55))
library(nnet)
capture.output(neural.net <- nnet(as.factor(Survived) ~ ., data=titanic,
size=10,decay=5e-2, maxit=50))
library(glmnet)
matrix.glmnet <- data.matrix(titanic[, -1])
glmnet <- glmnet(x=matrix.glmnet, y=factor(titanic$Survived), family = "binomial", lambda=.02)
svm.radial = svm(as.factor(Survived)~., data = titanic, kernel = "radial", probability=TRUE)
models <- list(naive.bayes, rforest, neural.net, glmnet, svm.radial)
names(models) <- c("naive.bayes", "rforest", "neural.net", "glmnet", "svm.radial")
comp <- ModelComparison(models, F)
pred.basic <- predict(comp, titanic[, -1])
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
devtools::load_all(".")
# all metrics default
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
c
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="all")
plot(comp, titanic[, 1], titanic[, -1], plot.type="auc")
plot(comp, titanic[, 1], titanic[, -1], plot.type="roc")
ensem <- Ensemble(comp$model.list, "majorityWeight", iris[, -1], iris[, 1])
warnings()
ensem <- Ensemble(comp$model.list, "majorityWeight", iris[, -1], iris[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", iris[, -1], iris[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", iris[, -1], iris[, 1])
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
weights
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
ensem
ensem$weight.list
summary(ensem)
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
names(preds)
preds
length(preds)
names(ensemble$models)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
i
names(preds)
names(preds)[[i]]
names(preds)[[i]]
names(preds)[[i]]
names(preds)[[i]]
names(preds)[[i]]
devtools::load_all(".")
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
names(preds)[[i]]
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
names(preds)
names(preds)[[i]]
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
devtools::load_all(".")
ensem <- Ensemble(comp$model.list, "majorityWeight", titanic[, -1], titanic[, 1])
ensem$weight.list
pred.ensem <- predict(ensem, titanic[, -1])
devtools::load_all(".")
pred.ensem <- predict(ensem, titanic[, -1])
devtools::load_all(".")
pred.ensem <- predict(ensem, titanic[, -1])
expect_equal(length(titanic[, 1]), length(pred.ensem))
pred.ensem
R CMD build brocolors
edit_r_environ()
library(devtools)
edit_r_environ()
library(caret)
install.packages("reshape2")
library(caret)
insta..packages("caret")
install.packages("caret")
install.packages("caret")
rm((caret))
caret
fit
rm(fit)
ls(all.names = TRUE
)
load("~/BestModel/.RData")
install.package(stringr)
install.package(stringi)
install.package(stringr)
library(devtools)
install.package(stringi)
install.packages("stringi")
install.packages("stringi")
install.packages("stringr")
install.packages("minqa")
instal.packages(caret)
install.packages(caret)
install.packages("caret")
install.packages("caret", dependencies = TRUE)
library(BestModel)
install.packages(kernlab)
install.packages("kernlab")
library(BestModel)
