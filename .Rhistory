install.packages("roxygen2")
install.packages("roxygen2")
devtools::document()
library(devetools)
library(devtools)
devtools::install()
data(iris)
a <- getModelComparisons(iris[,1:4], iris[,5])
library(BestModel)
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
View(a)
class(a)
a$svmLinear
a$neuralNet$neuralNet$finalModel
a$plots
a$plots[1]
a$plots[[1]]
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot3
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plto3
plot3
View(roc.2)
plot4
View(plotsToReturn)
plotsToReturn[3]
a <- getModelComparisons(iris[,1:4], iris[,5])
View(plotsToReturn)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot3
plotsToReturn[1]
View(plotsToReturn)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot3
plotsToReturn[i]
plotsToReturn[3]
plot.new()
plotsToReturn[3]
View(plotsToReturn)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot
plot3
plot4
plotsToReturn[3]
View(plotsToReturn)
plotsToReturn[3][2]
plotsToReturn[3][1]
plotsToReturn[3][1][1]
plotsToReturn[3][1][1][1]
plotsToReturn[3][1][1][1]
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plotsToReturn[i]
plotsToReturn[2]
View(plotsToReturn)
plotsToReturn[13
]
plotsToReturn[13][1]
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plotsToReturn[1]
plotsToReturn[2]
plotsToReturn[3]
plotsToReturn[4]
plot.new()
plotsToReturn[4]
plot.new()
plotsToReturn[3]
exit
stop
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$plots[[1]]
a$plots
a$plots[1]
a$plots[2]
a$plots[2][1]
a$plots[2][1][1]
a$plots
a$plots[[1]]
a$plots[[2]]
a$plots[[3]]
View(a)
a$plots[[3]][1]
plot(a$plots[[3]])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot(a)
plot(a, iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot(a, a$modelList, iris[,1:4], iris[,5], T)
plot(a, a$modelList, iris[,1:4], iris[,5], T)
source('~/BestModel/R/ModelGeneration.R')
plot(a, a$modelList, iris[,1:4], iris[,5], T)
plot.new()
plot(a, a$modelList, iris[,1:4], iris[,5], T)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
a$ROCs[2]
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
plot(a$ROCs[1])
plot(a$ROCs[2])
plot(a$ROCs[3])
class(a$ROCs[1])
class(a$ROCs[1][1])
a$ROCS[1]
a$ROCs[1]
a$ROCs[1]["levels"]
a$ROCs[1]$levels
class(a$ROCs[1])
a$ROCs[1]
naems(a$ROCs[1])
names(a$ROCs[1])
rownames(a$ROCs[1])
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs[1]
plot(a$ROCs[1])
plot.new()
plot(a$ROCs[1])
plot(a$ROCs[1])
a$ROCs[1]
class(a$ROCs[1])
attributes(a$ROCs[1])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs[1]
plot(a$ROCs[1])
a$ROCs
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
plot(a$ROCs[1][1])
pROC::roc(a$ROCs[1][1])
pROC::roc(a$ROCs[2])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
class(a$ROCs[2])
class(a$ROCs[2][1])
a$ROCs[2][1]
a$ROCs[2][1][1]
a$ROCs[2][1][[1]]
a$ROCs[2][1][[1]][1]
a$ROCs[2][1][[1]][[1]]
a$ROCs[2][1][[1]][3]
plot(a$ROCs[2][1][[1]])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
plot(a$ROCs[2][1][[1]])
a <- getModelComparisons(iris[,1:4], iris[,5])
iris = iris[iris$Species!="setosa"]
iris = iris[iris$Species!="setosa",]
a <- getModelComparisons(iris[,1:4], iris[,5])
iris = relevel(iris[iris$Species!="setosa",])
iris = iris[iris$Species!="setosa",])
str(iris)
iris = iris.reset_index(level=2, drop=T)
data(iris)
iris = iris.index.droplevel(2)
iris.index = iris.index.droplevel(2)
iris = iris[iris$Species!="setosa",]
iris$Species = iris$Species
a <- getModelComparisons(iris[,1:4], iris[,5])
iris$Species = as.factor(iris$Species)
a <- getModelComparisons(iris[,1:4], iris[,5])
str(iris)
iris = iris[iris$Species!="setosa",]
iris$Species = as.factor(iris$Species)
str(iris)
iris$Species = factor(iris$Species)
str(iris)
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
plot(a$ROCs[1])
plot(a$ROCs[1][1])
a$ROCs[1]
a$ROCs[[1]]
plot(a$ROCs[[1]])
# Read in Data
paper <- read.table(header = TRUE, text="
Run	Experiment	Paper_Clip_Type	Paper_Thickness	Flight_Time
1	1	Small	Regular	3.41
2	16	Big	Heavy	2.71
3	19	Big	Heavy	2.36
4	20	Big	Heavy	2.46
5	9	Small	Heavy	2.55
6	10	Small	Heavy	2.66
7	12	Big	Regular	3.5
8	7	Small	Heavy	2.93
9	11	Big	Regular	2.76
10	4	Small	Regular	3.6
11	2	Small	Regular	3.56
12	8	Small	Heavy	2.33
13	3	Small	Regular	3.01
14	17	Big	Heavy	2.66
15	18	Big	Heavy	2.32
16	15	Big	Regular	3.66
17	14	Big	Regular	2.93
18	5	Small	Regular	3.53
19	6	Small	Heavy	2.68
20	13	Big	Regular	3.49
")
# Get Summary Statistics
aggregate(Flight_Time~Paper_Clip_Type+Paper_Thickness, data=paper, FUN=mean)
aggregate(paper$Flight_Time~paper$Paper_Thickness+paper$Paper_Clip_Type, data=paper, FUN=sd)
# Boxplot
boxplot(paper$Flight_Time~paper$Paper_Thickness+paper$Paper_Clip_Type,
data=paper, ylab="Time in Air (s)", xlab="Factor Type")
library(lattice)
# Dotplot
dotplot(paper$Flight_Time~paper$Paper_Thickness+paper$Paper_Clip_Type, data=paper, ylab="Time in Air (s)", xlab="Factor Type")
# ANOVA
anova(aov(Flight_Time~Paper_Clip_Type+Paper_Thickness+Paper_Clip_Type*Paper_Thickness, data=paper))
# Pairwise summaries
TukeyHSD(aov(Flight_Time~Paper_Clip_Type+Paper_Thickness+Paper_Clip_Type*Paper_Thickness, data=paper))
# create residuals
paper$resids = resid(aov(Flight_Time~Paper_Clip_Type+Paper_Thickness+Paper_Clip_Type*Paper_Thickness, data=paper))
#make tbe index pot to check independence
plot(paper$resids, type="b")
abline(h=0)
# Make normal qq plot to check normality
qqnorm(paper$resids)
qqline(paper$resids)
# Check that the mean is very close to zero (it is)
mean(paper$resids)
# Check that the variances of the errors is constant (in pdf file)
interaction.plot(response=paper$Flight_Time, x.factor=paper$Paper_Clip_Type, trace.factor=paper$Paper_Thickness, main="Interaction Plot", ylab="Score Given", xlab ="Factor")
interaction.plot(response=paper$Flight_Time, x.factor=paper$Paper_Thickness, trace.factor=paper$Paper_Clip_Type, main="Interaction Plot", ylab="Score Given", xlab ="Factor")
24,diabetic,infuse,35)
dogs <- read.table(header = TRUE, text="dog,operation,method,rate
0,control,inject,44
0,control,infuse,28
4,control,inject,33
4,control,infuse,23
5,control,inject,38
5,control,infuse,34
21,control,inject,59
21,control,infuse,19
23,control,inject,46
23,control,infuse,26
16,diabetic,inject,54
16,diabetic,infuse,42
17,diabetic,inject,43
17,diabetic,infuse,23
18,diabetic,inject,55
18,diabetic,infuse,23
19,diabetic,inject,71
19,diabetic,infuse,27
24,diabetic,inject,57
24,diabetic,infuse,35")
dogs <- read.table(header = TRUE, sep=",", text="dog,operation,method,rate
0,control,inject,44
0,control,infuse,28
4,control,inject,33
4,control,infuse,23
5,control,inject,38
5,control,infuse,34
21,control,inject,59
21,control,infuse,19
23,control,inject,46
23,control,infuse,26
16,diabetic,inject,54
16,diabetic,infuse,42
17,diabetic,inject,43
17,diabetic,infuse,23
18,diabetic,inject,55
18,diabetic,infuse,23
19,diabetic,inject,71
19,diabetic,infuse,27
24,diabetic,inject,57
24,diabetic,infuse,35")
str(dog)
str(dogs)
dogs$dog = as.factor(dogs$dog)
str(dogs)
# Get Summary Statistics
aggregate(rate~operation+method, data=, FUN=mean)
# Get Summary Statistics
aggregate(rate~operation+method, data=dogs, FUN=mean)
aggregate(dogs$rate~dogs$operation+dogs$method, data=dogs, FUN=sd)
# Boxplot
library(lattice)
# Dotplot
dotplot(dogs$rate~dogs$dogs_Thickness+dogs$dogs_Clip_Type, data=dogs, ylab="Time in Air (s)", xlab="Factor Type")
# Dotplot
xyplot(rate~method|operation, groups=dog, type="a", ylab="Rate", xlab="Method")
# Dotplot
xyplot(rate~method|operation, groups=dog, type="a", ylab="Rate", xlab="Method", data=dogs)
dogmod= aov(rate~method+operation+operation*method+Error(dog), data = dogs)
View(dogmod)
print(dogmod)
summary(dogmod)
popcorn <- read.table(header = TRUE, sep=",", text="Brand,Temp,Box,Bag,%_Popped
Expensive,Room,1,1,84
Expensive,Frig,1,2,76
Expensive,Room,2,3,86
Expensive,Frig,2,4,86
Expensive,Room,3,5,91
Expensive,Frig,3,6,84
Generic,Room,4,7,74
Generic,Frig,4,8,87
Generic,Room,5,9,84
Generic,Frig,5,10,83
Generic,Room,6,11,83
Generic,Frig,6,12,90")
# set as factor
popcorn$dog = as.factor(popcorn$dog)
str(popcorn)
# set as factor
popcorn$Box = as.factor(popcorn$Box)
popcorn$Bag = as.factor(popcorn$Bag)
str(popcorn)
# Get Summary Statistics
aggregate(%_Popped~Brand+Temp, data=popcorn, FUN=mean)
aggregate(popcorn$%_Popped~popcorn$Brand+popcorn$Temp, data=popcorn, FUN=sd)
# Get Summary Statistics
aggregate(%_Popped~Brand+Temp, data=popcorn, FUN=mean)
str(popcorn)
# set as factor
popcorn$Box = as.factor(popcorn$Box)
popcorn$Bag = as.factor(popcorn$Bag)
str(popcorn)
popcorn <- read.table(header = TRUE, sep=",", text="Brand,Temp,Box,Bag,Popped
Expensive,Room,1,1,84
Expensive,Frig,1,2,76
Expensive,Room,2,3,86
Expensive,Frig,2,4,86
Expensive,Room,3,5,91
Expensive,Frig,3,6,84
Generic,Room,4,7,74
Generic,Frig,4,8,87
Generic,Room,5,9,84
Generic,Frig,5,10,83
Generic,Room,6,11,83
Generic,Frig,6,12,90")
# set as factor
popcorn$Box = as.factor(popcorn$Box)
popcorn$Bag = as.factor(popcorn$Bag)
str(popcorn)
# Get Summary Statistics
aggregate(Popped~Brand+Temp, data=popcorn, FUN=mean)
aggregate(popcorn$Popped~popcorn$Brand+popcorn$Temp, data=popcorn, FUN=sd)
# Boxplot
library(lattice)
# Dotplot
xyplot(Popped~Temp|Brand, groups=dog, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
dogmod= aov(Popped~Temp+Brand+Brand*Temp+Error(dog), data = popcorn)
# Dotplot
xyplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
dogmod= aov(Popped~Temp+Brand+Brand*Temp+Error(Box), data = popcorn)
print(dogmod)
summary(dogmod)
popmod= aov(Popped~Temp+Brand+Brand*Temp+Error(Box), data = popcorn)
print(popmod)
summary(popmod)
popmod= aov(Popped~Temp+Brand+Brand*Temp+Error(Box), data = popcorn)
summary(popmod)
str(popcorn)
# Get Summary Statistics
aggregate(Popped~Brand+Temp, data=popcorn, FUN=mean)
# Get Summary Statistics
aggregate(Popped~Brand, data=popcorn, FUN=mean)
aggregate(Popped~Temp, data=popcorn, FUN=mean)
mean(popcorn$Popped)
# read in the data - btw this comment is redundant, I'm only including it for points
popcorn <- read.table(header = TRUE, sep=",", text="Brand,Temp,Box,Bag,Popped
Expensive,Room,1,1,84
Expensive,Frig,1,2,76
Expensive,Room,2,3,86
Expensive,Frig,2,4,86
Expensive,Room,3,5,91
Expensive,Frig,3,6,84
Generic,Room,4,7,74
Generic,Frig,4,8,87
Generic,Room,5,9,84
Generic,Frig,5,10,83
Generic,Room,6,11,83
Generic,Frig,6,12,90")
# set as factor
popcorn$Box = as.factor(popcorn$Box)
popcorn$Bag = as.factor(popcorn$Bag)
str(popcorn)
# Get Summary Statistics
aggregate(Popped~Brand+Temp, data=popcorn, FUN=mean)
aggregate(popcorn$Popped~popcorn$Brand+popcorn$Temp, data=popcorn, FUN=sd)
# Boxplot
library(lattice)
# Dotplot
xyplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
popmod= aov(Popped~Temp+Brand+Brand*Temp+Error(Box), data = popcorn)
print(popmod)
summary(popmod)
# Dotplot
dotplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
xyplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
# Dotplot
dotplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
# Dotplot
dotplot(Popped~Temp|Brand, groups=Box, type="l", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
# Dotplot
dotplot(Popped~Temp|Brand, groups=Box, type="d", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
# Dotplot
dotplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
xyplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
# Dotplot
dotplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
xyplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
# Dotplot
#dotplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn,x.jitter=T)
xyplot(Popped~Temp|Brand, groups=Box, type="a", ylab="Percent Popped", xlab="Temp", data=popcorn)
# Get Summary Statistics
aggregate(Popped~Brand+Temp, data=popcorn, FUN=mean)
