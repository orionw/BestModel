for (model in modelList) {
if (!is.null(model)) {
print(model)
print(dim(test_data))
preds <- predict(model, newdata = test_data, type="raw")
print(length(preds))
print("Pred done")
if (multi_class) {
assign(paste("roc.",i, sep=""), pROC::multiclass.roc(labels, as.numeric(preds)))
print(paste("roc.",i, sep=""))
} else {
assign(paste("roc.",i, sep=""), pROC::roc(labels, as.numeric(preds)))
print(paste("roc.",i), sep = "")
}
i = i + 1
}
}
i = i -1
################# see plot(a$ROCs[2][1][[1]]) ################
browser()
#Plot ROC curves side by side
plotsToReturn <- vector(mode = "list", i-1)
if (multi_class) {
for (count in 1:i) {
# adjust for the first one being outside the loop
rs <- get(paste("roc.", count, sep=""))[['rocs']]
plotsToReturn[[count]] <- pROC::roc(rs[[1]])
}
} else {
for (count in 1:i) {
# Do regular ROC here
plotsToReturn[[count]] = get(paste("roc.", count, sep=""))
}
}
#legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
#      col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
return(plotsToReturn)
}
#' This function evalutates many different machine learning models and returns those models with comparison charts
#' @param trainingSet the dataset to be trained on
#' @param trainingClasses the labels of the training set
#' @keywords
#' @export
#' @examples
#' getModelComparisons()
getModelComparisons <-function(trainingSet,training_classes_input, validation="80/20", modelList=NULL, dataSetSize="small") {
print("In Function")
# prep the data if not already a factor
training_classes_input = as.factor(training_classes_input)
set.seed(sample(1:9999999, 1))
multi_class = (nlevels(training_classes_input) > 2)
# Get the method of validation and prepare testing and training sets
if (validation == "80/20") {
# partition the data into training and testing data stratified by class
trainIndex <- caret::createDataPartition(training_classes_input, p=0.8, list=F)
# get the dataframes
training_data <- trainingSet[trainIndex,]
testing_data <- trainingSet[-trainIndex,]
# get the labels
training_classes <- training_classes_input[trainIndex]
testing_classes <- training_classes_input[-trainIndex]
# we will take care of the validation
trctrl <- caret::trainControl(method = "none", savePredictions = T)
} else {
# we don't need a specific testing set
training_data = trainingSet
testing_data <- trainingSet
testing_classes <- training_classes
if (validation == "cv") {
trctrl <- caret::trainControl(method = "cv", savePredictions = T)
} else {
trctrl <- caret::trainControl(method = "none", savePredictions = T)
}
}
print("validation method complete")
tune_length = 1
svmLinear <- caret::train(training_data, training_classes, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = tune_length)
neuralNet <- caret::train(training_data, training_classes, method = "nnet",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = tune_length)
glmnet <- caret::train(training_data, as.factor(training_classes), method = "glmnet",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = tune_length)
randomForest <- caret::train(training_data, training_classes, method = "rf",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = tune_length)
if (!multi_class) {
glm_model <- caret::train(training_data, as.factor(training_classes), method = "glm",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = tune_length)
} else {
glm_model = NULL
}
print("Done Processing")
# get the visuals for all the models
modelVec = list(svmLinear, neuralNet, glmnet, randomForest, glm_model)
visualizeROC <- getROCGraph(modelVec, test_data = testing_data, multi_class = multi_class,labels=testing_classes)
names(modelVec) <- c("svmLinear", "neuralNet", "glmnet", "randomForest", "glm")
modelComp <- ModelComparison(modelVec, visualizeROC)
return(modelComp)
}
library(devtools)
install(BestModel)
install"BestModel"
install("BestModel")
setwd("..")
install("BestModel")
ls
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
install("BestModel")
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
install("BestModel")
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
install("BestModel")
library(BestModel)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
install("BestModel")
library(BestModel)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
devtools::load_all()
ls
library(BestModel)
library(plyr)
library(ggplot2)
library(ggplot2)
library(BestModel)
install("BestModel")
data(iris)
irisReal <-iris[-toBeRemoved,]
count(irisReal$Species)
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
str(irisReal)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
install.package("BestModel")
ls
library(devtools)
install.package("BestModel")
install.packages\("BestModel")
install.packages("BestModel")
install.packages("BestModel")
install("BestModel")
ls
build()
library(devtools)
build()
setwd("..")
ls
build()
install()
setwd("Documents/BestModel")
install()
build()
build()
install()
build()
install()
build()
install()
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
devtools::load_all()
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
check(document=F) {
})
check(document=F)
install()
new = getModelComparisons(irisReal[,1:4], irisReal[,5])
library(BestModel)
library(BestModel)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
library(devtools)
build()
install()
getModelComarisons
getModelComparisons
getModelComparisons()
library(BestModel)
getModelComparisons()
ls getModelComparisons()
ls
getModelComparisons
build()
install(upgrade = T)
getModelComparisons
remove.packages("BestModel")
install(upgrade = T)
getModelComparisons
getModelComparisons
cwd()
pwd()
getwd()
ls()
devtools::load_all(".")
library(BestModel)
library(BestModel)
getModelComparisons
rm(list = ls())
source("BestModel")
source("ModelGeneration")
source("ModelGeneration.R")
source("R/ModelGeneration.R")
ls
getModelComparisons
getModelComparisons
getModelComparisons
load_all()
getModelComparisons
install()
library(BestModel)
library(BestModel)
install()
library(plyr)
library(ggplot2)
library(BestModel)
data(iris)
toBeRemoved<-which(iris$Species=="setosa")
irisReal <-iris[-toBeRemoved,]
count(irisReal$Species)
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
str(irisReal)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
class(a)
plot(a, irisReal$Species, F)
library(BestModel)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
a$model_list
a$
plot(a, irisReal$Species, F)
plot(a, irisReal$Species, F)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
library(BestModel)
pred_list <- predict(a, irisReal)
install()
predict()
predict()a
predict(a)
a$.multiclass
class(a)
a <- getModelComparisons(irisReal[,1:4], irisReal[,5])
class(a)
devtools::use_testthat()
class9a)
class(a)
class9a$model_list
class(a$model_list)
a$.multiclass
class(a$.multiclass)
comp$.multi_class
library(stringr)
a$model_list[[4]]
a$model_list[[5]]
a$model_list[[6]]
a$model_list[[2]]
a$model_list[[3]]
a$model_list[[4]]
a$model_list[[1]]
a$model_list[[1]]
class(a$model_list[[1]])
a$model_list[[1]][1]
a$model_list[[1]][[1]]
a$model_list[[1]][[1]][[1]]
a$model_list[[1]][[1]][[2]]
a$model_list[[1]][[1]][[3]]
a$model_list[[1]][[1]][[4]]
a$model_list[[1]][[1]][[0]]
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
toBeRemoved<-which(iris$Species=="setosa")
irisReal <-iris[-toBeRemoved,]
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
iris_ready = irisReal
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(comp, iris_ready[,5], iris_ready[,1:4])
plot(a, iris_ready[,5], iris_ready[,1:4])
devtools::load_all(".")
plot(a, iris_ready[,5], iris_ready[,1:4])
rm(plot.ModelComparison())
rm(list = ls())
devtools::load_all(".")
data(iris)
toBeRemoved<-which(iris$Species=="setosa")
irisReal <-iris[-toBeRemoved,]
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
iris_ready = irisReal
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(a, iris_ready[,5], iris_ready[,1:4])
plot(a, iris_ready[,5], iris_ready[,1:4])
devtools::load_all(".")
plot(a, iris_ready[,5], iris_ready[,1:4])
devtools::load_all(".")
plot(a, iris_ready[,5], iris_ready[,1:4])
devtools::load_all(".")
plot(a, iris_ready[,5], iris_ready[,1:4])
devtools::load_all(".")
plot(a, iris_ready[,5], iris_ready[,1:4])
devtools::load_all(".")
plot(a, iris_ready[,5], iris_ready[,1:4])
# Glass Identification Database
data(Glass)
dim(Glass)
levels(Glass$Type)
head(Glass)
# Glass Identification Database
data(glass)
G
# load the library
library(mlbench)
# load the library
library(mlbench)
# Glass Identification Database
data(Glass)
dim(Glass)
levels(Glass$Type)
head(Glass)
# Wisconsin Breast Cancer Database
data(BreastCancer)
dim(BreastCancer)
levels(BreastCancer$Class)
head(BreastCancer)
bc <- getModelComparisons(BreastCancer[,-1], BreastCancer$Class)
plot(bc, BreastCancer$Class, BreastCancer[,-1])
plot(bc, BreastCancer$Class, BreastCancer[,-1])
bc <- getModelComparisons(BreastCancer[,-1], BreastCancer$Class)
head(BreastCancer[,-1])
head(BreastCancer)
head(BreastCancer[,-1])
str(BreastCancer[,-1])
str(BreastCancer[,-length()])
str(BreastCancer[,-length(BreastCancer)])
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], BreastCancer$Class)
plot(bc, BreastCancer$Class, BreastCancer[,-length(BreastCancer)])
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], BreastCancer$Class)
devtools::load_all(".")
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], BreastCancer$Class)
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], as.numeric(BreastCancer$Class))
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], BreastCancer$Class)
class(BreastCancer$Class)
class(as.numeric(BreastCancer$Class))
print(as.numeric(BreastCancer$Class))
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], as.numeric(BreastCancer$Class)-1)
levels(as.numeric(BreastCancer$Class))
levels((BreastCancer$Class))
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], BreastCancer$Class)
iris_ready[,5]
BreastCancer$Class
head(iris_ready)
head(BreastCancer)
cass(BreastCancer$Id)
class(BreastCancer$Id)
BreastCancer = BreastCancer[,-1]
str(BreastCancer[,-length(BreastCancer)])
bc <- getModelComparisons(BreastCancer[,-length(BreastCancer)], BreastCancer$Class)
str(BreastCancer[,-length(BreastCancer)])
View(BreastCancer)
bc <- getModelComparisons(BreastCancer[,1:4], BreastCancer$Class)
BreastCancer[,1:4]
str(BreastCancer[,1:4])
dmy <- dummyVars(" ~ .", data = BreastCancer)
library(caret)
dmy <- dummyVars(" ~ .", data = BreastCancer)
trsf <- data.frame(predict(dmy, newdata = customers))
trsf <- data.frame(predict(dmy, newdata = BreastCancer))
head(trsf)
plot(bc, BreastCancer$Class, trsf)
bc <- getModelComparisons(trsf, BreastCancer$Class)
devtools::load_all(".")
bc <- getModelComparisons(trsf, BreastCancer$Class)
devtools::load_all(".")
bc <- getModelComparisons(trsf, BreastCancer$Class)
glmnet <- caret::train(training_classes ~ ., data=train  method = "glmnet",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = tune_length)
devtools::load_all(".")
devtools::load_all(".")
bc <- getModelComparisons(trsf, BreastCancer$Class)
plot(a, iris_ready[,5], iris_ready[,1:4])
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(a, iris_ready[,5], iris_ready[,1:4])
bc <- getModelComparisons(trsf, BreastCancer$Class)
sum(is.na(trsf))
head(trsf)
tail(trsf)
view(trsf)
View(trsf)
trsf[!complete.cases(trsf), ]
sum(is.na(BreastCancer))
trsf = trsf[!complete.cases(trsf), ]
bc <- getModelComparisons(trsf, BreastCancer$Class)
sum(is.na(trsf))
trsf = trsf[complete.cases(trsf), ]
trsf <- data.frame(predict(dmy, newdata = BreastCancer))
head(trsf)
sum(is.na(trsf))
trsf = trsf[complete.cases(trsf), ]
sum(is.na(trsf))
bc <- getModelComparisons(trsf, BreastCancer$Class)
sum(is.na(trsf))
bc <- getModelComparisons(trsf, BreastCancer$Class)
devtools::load_all(".")
bc <- getModelComparisons(trsf, BreastCancer$Class)
sum(is.na(trsf))
trsf <- na.omit(trsf)
bc <- getModelComparisons(trsf, BreastCancer$Class)
devtools::load_all(".")
bc <- getModelComparisons(trsf, BreastCancer$Class)
devtools::load_all(".")
bc <- getModelComparisons(trsf, BreastCancer$Class)
trsf$Class
# Wisconsin Breast Cancer Database
data(BreastCancer)
dim(BreastCancer)
levels(BreastCancer$Class)
head(BreastCancer)
class(BreastCancer$Id)
levels((BreastCancer$Class))
BreastCancer = BreastCancer[,-1]
sum(is.na(BreastCancer))
str(BreastCancer[,-length(BreastCancer)])
dmy <- dummyVars(" ~ .", data = BreastCancer)
trsf <- data.frame(predict(dmy, newdata = BreastCancer))
head(trsf)
sum(is.na(trsf))
tail(trsf)
trsf <- na.omit(trsf)
trsf = trsf[complete.cases(trsf), ]
sum(is.na(trsf))
trsf.x = tsrf[,-length(trsf)]
trsf.x = trsf[,-length(trsf)]
bc <- getModelComparisons(trsf.x, trsf$Class)
# Johns Hopkins University Ionosphere database
data(Ionosphere)
dim(Ionosphere)
levels(Ionosphere$Class)
head(Ionosphere)
sum(is.na(Ionosphere))
x.val = Ionosphere[,-length(Ionosphere)]
bc <- getModelComparisons(x.val, Ionosphere$Class)
str(Ionosphere)
x.val = x.val[,3:]
x.val = x.val[,c(-1, -2)]
bc <- getModelComparisons(x.val, Ionosphere$Class)
plot(bc, trsf$Class, trsf.x)
plot(bc, x.val, Ionosphere$Class)
Ionosphere$Class
x.val
str(x.val)
bc <- getModelComparisons(x.val, Ionosphere$Class)
plot(bc, x.val, Ionosphere$Class)
plot(bc,  Ionosphere$Class,x.val)
plot(bc,Ionosphere$Class,x.val)
plot(bc, Ionosphere$Class, x.val)
plot(bc, Ionosphere$Class, x.val)
bc <- getModelComparisons(x.val, Ionosphere$Class)
plot(bc, Ionosphere$Class, x.val)
devtools::load_all(".")
bc <- getModelComparisons(x.val, Ionosphere$Class)
plot(bc, Ionosphere$Class, x.val)
length(Ionosphere$Class)
str(x.val)
print(str(x.values))
str(x.val)
x.m <- model.matrix( ~.+0, training_data)
devtools::load_all(".")
bc <- getModelComparisons(x.val, Ionosphere$Class)
length(Ionosphere$Class)
plot(bc, Ionosphere$Class, x.val)
# Johns Hopkins University Ionosphere database
data(Ionosphere)
x.val = Ionosphere[,-length(Ionosphere)]
x.val = x.val[,c(-1, -2)]
ion <- getModelComparisons(x.val, Ionosphere$Class)
plot(ion, Ionosphere$Class, x.val)
plot(a, iris_ready[,5], iris_ready[,1:4])
data(iris)
toBeRemoved<-which(iris$Species=="setosa")
irisReal <-iris[-toBeRemoved,]
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
iris_ready = irisReal
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(a, iris_ready[,1:4],iris_ready[,5])
# Johns Hopkins University Ionosphere database
data(Ionosphere)
x.val = Ionosphere[,-length(Ionosphere)]
x.val = x.val[,c(-1, -2)]
ion <- getModelComparisons(x.val, Ionosphere$Class)
plot(ion,  x.val,Ionosphere$Class)
devtools::load_all(".")
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(a, iris_ready[,1:4],iris_ready[,5])
head(iris_ready)
# load the library
library(mlbench)
# Johns Hopkins University Ionosphere database
data(Ionosphere)
x.val = Ionosphere[,-length(Ionosphere)]
x.val = x.val[,c(-1, -2)]
ion <- getModelComparisons(x.val, Ionosphere$Class)
plot(ion,  x.val,Ionosphere$Class)
