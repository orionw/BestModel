anova(aov(Score~Wordlist+Distracter+Distracter*Wordlist+as.factor(Student), data=memory))
source('C:/Users/orion/Desktop/OARS/OARS/predictive models for OARS.R', echo=TRUE)
#ROC curves for models
library(pROC)
#two factor model with glm
tf.train <- sample_n(Day0OARS, 1100)
tf.test <- sample_n(Day0OARS, 400)
two.factor <- glm(Day0actual ~ AB_RISK + EL_RISK, data = tf.train, family = "binomial")
summary(two.factor)
tf.preds <- predict(two.factor, newdata = tf.test)
roc.tf <- roc(tf.test$Day0actual, tf.preds)
plot(roc.tf, col = "blue")
auc(roc.tf)
#glm model by all items
pred <- predict(model, newdata = UDTtest)
roc.1 <- roc(UDTtest$Day0AB, pred)
plot(roc.1, col = "red", add = T)
auc(roc.1)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
# Neural Net
nnet <- loadRData("nnet.RData")
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
#plot(roc.0, add = T, col = "brown")
pROC::auc(roc.0)
#svm tuned model
pred2 <- (predict(svm1, newdata = UDTtest, decision.values = T))
pred2 <- as.array(pred2)
pred2 <- attr(pred2, "decision.values")
pred2 <- as.vector(pred2)
roc.2 <- roc(UDTtest$Day0AB, pred2)
plot(roc.2, add = T, col = "green")
auc(roc.2)
#test on different partition of data
pred3 <- predict(svm1, newdata = UDTtest3, decision.values = T)
pred3 <- as.array(pred3)
pred3 <- attr(pred3, "decision.values")
pred3 <- as.vector(pred3)
roc.3 <- roc(UDTtest3$Day0AB, pred3)
plot(roc.3, add = T, col = "yellow")
auc(roc.3)
#start from scratch to rebuild the svm model with same params
set.seed(1234)
svm.train <- sample_n(Day0Data, 1100)
svm.test <- sample_n(Day0Data, 400)
svm.validate <- svm(Day0AB ~., data = svm.train,
kernel = "radial",
cost = 4,
gamma = 0.01176471,
type = "C-classification",
degree = 3,
nu = 0.5,
cross = 10)
#ROC
pred4 <- predict(svm.validate, newdata = svm.test, decision.values = T)
pred4 <- as.array(pred4)
pred4 <- attr(pred4, "decision.values")
pred4 <- as.vector(pred4)
roc.4 <- roc(svm.test$Day0AB, pred4)
plot(roc.4, add = T, col = "purple")
auc(roc.4)
#Try with M6 data
pred5 <- predict(svm.validate, newdata = M6Data, decision.values = T)
pred5 <- as.array(pred5)
pred5 <- attr(pred5, "decision.values")
pred5 <- as.vector(pred5)
roc.5 <- roc(M6Data$M6AB, pred5)
plot(roc.5, add = T, col = "orange")
auc(roc.5)
#adjust the threshold
pred5 <- predict(svm.validate, newdata = test.udt1, decision.values = T)
predpred5 <- as.array(pred5)
pred5 <- attr(pred5, "decision.values")
fitted.svm.validate <- ifelse(pred5 >  .9, 0, 1)
table <- table(data.frame(true_values= test.udt1$Day0AB, predictions = fitted.svm.validate))
table
plot(table, type = "h", ylab = "Predicted Values", xlab = "True Values", main = "Pred vs Actual UDT AB", col = "grey")
confusionMatrix(as.factor(fitted.svm.validate), test.udt1$Day0AB)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
#Validation using different sampling method
#set seed and recreate svm1
set.seed(0528)
library(dataPreparation)
train_index1 <- sample(1:nrow(Day0Data), 0.7*nrow(Day0Data))
test_index1 <- setdiff(1:nrow(Day0Data), train_index)
train.udt1 <- Day0Data[train_index1,]
test.udt1 <- Day0Data[test_index1,]
library(e1071)
svm.validate1 <- svm(Day0AB ~., data = train.udt1,
kernel = "radial",
cost = 4,
gamma = 0.01176471,
type = "C-classification",
degree = 3,
nu = 0.5,
cross = 10)
pred11 <- predict(svm.validate1, newdata = test.udt1, decision.values = T)
pred11 <- as.array(pred11)
pred11 <- attr(pred11, "decision.values")
pred11 <- as.vector(pred11)
library(pROC)
roc.11 <- roc(test.udt1$Day0AB, pred11)
plot(roc.11, col = "purple")
auc(roc.11)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
library(pROC)
roc.11 <- roc(test.udt1$Day0AB, pred11)
plot(roc.11, col = "purple")
auc(roc.11)
plot(roc.0, col = "yellow", add=T)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
# Neural Net
nnet <- loadRData("nnet.RData")
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
#plot(roc.0, add = T, col = "brown")
pROC::auc(roc.0)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
plot(roc.0, col = "yellow", add=T)
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
# Neural Net
nnet <- loadRData("nnet.RData")
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
# Neural Net
nnet <- loadRData("nnet.RData")
# Neural Net
nnet <- loadRData("nnet.RData")
ls
ls()
# Neural Net
nnet <- loadRData("nnet.RData")
cwd()
pwd()
# Neural Net
nnet <- loadRData("~/OARS/OARS/net.RData")
# Neural Net
nnet <- loadRData("C\Users\orion\Desktop\OARS\OARS/net.RData")
# Neural Net
nnet <- loadRData("C/Users/orion/Desktop/OARS/OARS/net.RData")
# Neural Net
nnet <- loadRData("C/Users/orion/Desktop/OARS/OARS/net.RData")
# Neural Net
list.files(R.home())
getwd()
# Neural Net
nnet <- loadRData("C:/Users/orion/Desktop/OARS/OARS/net.RData")
# Neural Net
list.files("C:/Users/orion/Desktop/OARS/OARS")
nnet <- loadRData("C:/Users/orion/Desktop/OARS/OARS/net.RData")
nnet <- loadRData("C:/Users/orion/Desktop/OARS/OARS/nnet.RData")
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
#plot(roc.0, add = T, col = "brown")
pROC::auc(roc.0)
#svm tuned model
pred2 <- (predict(svm1, newdata = UDTtest, decision.values = T))
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
sample(1:16, 3, replace=TRUE)
sample(1:16, 16, replace=TRUE)
sample(1:16, 16, replace=F)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("parent_directory")
create("BestModel")
install.packages("devtools")
install.packages("roxygen2")
setwd("parent_directory")
create("BestModel")
ls
ls()
setwd("~/")
setwd("~/BestModel")
create("BestModel")
devtools::create("BestModel")
setwd("~/")
devtools::create("BestModel")
devtools::create("BestModel")
install.packages("ps")
devtools::create("BestModel")
setwd("./BestModel")
document()
devtools::document()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::document()
library(devetools)
library(devtools)
devtools::install()
data(iris)
a <- getModelComparisons(iris[,1:4], iris[,5])
library(BestModel)
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
devtools::install()
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
View(a)
class(a)
a$svmLinear
a$neuralNet$neuralNet$finalModel
a$plots
a$plots[1]
a$plots[[1]]
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot3
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plto3
plot3
View(roc.2)
plot4
View(plotsToReturn)
plotsToReturn[3]
a <- getModelComparisons(iris[,1:4], iris[,5])
View(plotsToReturn)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot3
plotsToReturn[1]
View(plotsToReturn)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot3
plotsToReturn[i]
plotsToReturn[3]
plot.new()
plotsToReturn[3]
View(plotsToReturn)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot
plot3
plot4
plotsToReturn[3]
View(plotsToReturn)
plotsToReturn[3][2]
plotsToReturn[3][1]
plotsToReturn[3][1][1]
plotsToReturn[3][1][1][1]
plotsToReturn[3][1][1][1]
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plotsToReturn[i]
plotsToReturn[2]
View(plotsToReturn)
plotsToReturn[13
]
plotsToReturn[13][1]
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plotsToReturn[1]
plotsToReturn[2]
plotsToReturn[3]
plotsToReturn[4]
plot.new()
plotsToReturn[4]
plot.new()
plotsToReturn[3]
exit
stop
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$plots[[1]]
a$plots
a$plots[1]
a$plots[2]
a$plots[2][1]
a$plots[2][1][1]
a$plots
a$plots[[1]]
a$plots[[2]]
a$plots[[3]]
View(a)
a$plots[[3]][1]
plot(a$plots[[3]])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot(a)
plot(a, iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
plot(a, a$modelList, iris[,1:4], iris[,5], T)
plot(a, a$modelList, iris[,1:4], iris[,5], T)
source('~/BestModel/R/ModelGeneration.R')
plot(a, a$modelList, iris[,1:4], iris[,5], T)
plot.new()
plot(a, a$modelList, iris[,1:4], iris[,5], T)
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
a$ROCs[2]
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
plot(a$ROCs[1])
plot(a$ROCs[2])
plot(a$ROCs[3])
class(a$ROCs[1])
class(a$ROCs[1][1])
a$ROCS[1]
a$ROCs[1]
a$ROCs[1]["levels"]
a$ROCs[1]$levels
class(a$ROCs[1])
a$ROCs[1]
naems(a$ROCs[1])
names(a$ROCs[1])
rownames(a$ROCs[1])
a <- getModelComparisons(iris[,1:4], iris[,5])
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs[1]
plot(a$ROCs[1])
plot.new()
plot(a$ROCs[1])
plot(a$ROCs[1])
a$ROCs[1]
class(a$ROCs[1])
attributes(a$ROCs[1])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs[1]
plot(a$ROCs[1])
a$ROCs
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
plot(a$ROCs[1][1])
pROC::roc(a$ROCs[1][1])
pROC::roc(a$ROCs[2])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
class(a$ROCs[2])
class(a$ROCs[2][1])
a$ROCs[2][1]
a$ROCs[2][1][1]
a$ROCs[2][1][[1]]
a$ROCs[2][1][[1]][1]
a$ROCs[2][1][[1]][[1]]
a$ROCs[2][1][[1]][3]
plot(a$ROCs[2][1][[1]])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
plot(a$ROCs[2][1][[1]])
a <- getModelComparisons(iris[,1:4], iris[,5])
iris = iris[iris$Species!="setosa"]
iris = iris[iris$Species!="setosa",]
a <- getModelComparisons(iris[,1:4], iris[,5])
iris = relevel(iris[iris$Species!="setosa",])
iris = iris[iris$Species!="setosa",])
str(iris)
iris = iris.reset_index(level=2, drop=T)
data(iris)
iris = iris.index.droplevel(2)
iris.index = iris.index.droplevel(2)
iris = iris[iris$Species!="setosa",]
iris$Species = iris$Species
a <- getModelComparisons(iris[,1:4], iris[,5])
iris$Species = as.factor(iris$Species)
a <- getModelComparisons(iris[,1:4], iris[,5])
str(iris)
iris = iris[iris$Species!="setosa",]
iris$Species = as.factor(iris$Species)
str(iris)
iris$Species = factor(iris$Species)
str(iris)
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
source('~/BestModel/R/ModelGeneration.R')
a <- getModelComparisons(iris[,1:4], iris[,5])
a$ROCs
plot(a$ROCs[1])
plot(a$ROCs[1][1])
a$ROCs[1]
a$ROCs[[1]]
plot(a$ROCs[[1]])
