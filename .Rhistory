# create the models
comp <- getModelComparisons(titanic[,1:4], titanic[,5])
devtools::load_all(".")
comp <- getModelComparisons(titanic[,1:4], titanic[,5])
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="95/05")
comp
comp$model_list$svmLinear
comp$model_list$svmLinear$results
devtools::load_all(".")
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="95/05")
comp$model_list$svmLinear$results
comp$model_list$svmLinear$pred
devtools::load_all(".")
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="95/05")
comp$model_list$svmLinear$results
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="cv")
comp$model_list$svmLinear$results
comp$model_list$svmLinear$pred
comp$model_list$svmLinear$results
## Give dataset not in one-hot encoding
# give warning that we are attempting to convert
df.list <- prepare_categorical_breast_cancer()
prepare_categorical_breast_cancer <- function() {
data(BreastCancer)
# remove columns to make the predictions less obvious and faster testing
BreastCancer <- BreastCancer[, c(T, F, F, T, F, T, F, F, F, F, T)]
# remove NA rows
BreastCancer <- na.omit(BreastCancer)
BreastCancer = BreastCancer[complete.cases(BreastCancer), ]
breast.cancer.y = BreastCancer$Class
# No NA's
assertthat::are_equal(0, sum(is.na(BreastCancer)))
# remove the class predictions
BreastCancer = BreastCancer[,-length(BreastCancer)]
# Remove ID column
BreastCancer = BreastCancer[,-1]
return(list(BreastCancer, breast.cancer.y))
}
## Give dataset not in one-hot encoding
# give warning that we are attempting to convert
df.list <- prepare_categorical_breast_cancer()
breast.cancer.x = df.list[[1]]
breast.cancer.y = df.list[[2]]
#######  use BestModel on the categorical data  ######
# Note that both will check if the data is encoded properly
cancer <- getModelComparisons(breast.cancer.x, breast.cancer.y)
expect_equal(cancer$force_prepared, TRUE)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
devtools::load_all(".")
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
Source("ModelGeneration.R")
source("ModelGeneration.R")
source("~ModelGeneration.R")
plot(cancer, breast.cancer.y, breast.cancer.x)
source("~/BestModel/R/ModelGeneration.R)
#' This function evalutates many different machine learning models and returns those models with comparison charts
#' @param trainingSet the dataset to be trained on
#' @param trainingClasses the labels of the training set
#' @keywords
#' @export
#' @examples
#' plot()
plot.ModelComparison <- function(object, labels, training_data = "none", predictions="empty") {
# error check the arguments
if (class(training_data) != "data.frame" || training_data == "none") {
# check to see if the training_data hasn't been prepped and if it was trained on prepped data
is_prepped <- sapply(training_data, function(x) (is.numeric(x) || length(levels(x)) <= 2))
if (object$force_prepared || sum(is_prepped) != ncol(training_data)) {
# Data is not in one hot encoding - try to do it
training_data = prepData(training_data)
}
if (predictions == "empty") {
# predictions somehow failed to happen - predict in here
stop("Both training data and prediction vector were not given.  Give at least one to plot.")
} else {
# use the given predictions
pred_basic = predictions
}
}
if (predictions == "empty") {
# Predictions not given - create them here from training data
pred_basic <- predict(object$model_list, newdata=training_data, type="prob")
} else {
# use the given predictions
pred_basic = predictions
}
if (object$.multi_class == TRUE) {
# do stuff later
message("dataset is multi-class")
} else {
i = 0
colorPal = rainbow(length(object$model_list))
for (model in object$model_list) {
i = i + 1
if (!is.null(model)) {
# if given in dataframe format, reduce to vector
if (class(pred_basic[[i]]) == "data.frame") {
pred_basic[[i]] <- pred_basic[[i]][, 1]
}
if (i == 1) {
# do this to init the plot - for the first model
assertthat::are_equal(length(labels), length(pred_basic[[i]]))
roc_plot <- pROC::roc(labels, pred_basic[[i]])
plot(roc_plot, col = colorPal[i], title="ROC Comparison")
} else {
assertthat::are_equal(length(labels), length(pred_basic[[i]]))
roc_plot <- pROC::roc(labels, pred_basic[[i]])
plot(roc_plot, add = T, col = colorPal[i])
}
}
legend("topright", title="Model Type", legend=names(object$model_list),
col=colorPal, lty=1:2, cex=0.8)
}
}
}
devtools::load_all(".")
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
object
training_data
plot(cancer, breast.cancer.y, breast.cancer.x)
class(training_data)
devtools::load_all(".")
devtools::load_all(".")
plot(cancer, breast.cancer.y, breast.cancer.x)
class(object)
devtools::load_all(".")
plot(cancer, breast.cancer.y, breast.cancer.x)
prepare_categorical_breast_cancer <- function() {
data(BreastCancer)
# remove columns to make the predictions less obvious and faster testing
BreastCancer <- BreastCancer[, c(T, F, F, T, F, T, F, F, F, F, T)]
# remove NA rows
BreastCancer <- na.omit(BreastCancer)
BreastCancer = BreastCancer[complete.cases(BreastCancer), ]
breast.cancer.y = BreastCancer$Class
# No NA's
assertthat::are_equal(0, sum(is.na(BreastCancer)))
# remove the class predictions
BreastCancer = BreastCancer[,-length(BreastCancer)]
# Remove ID column
BreastCancer = BreastCancer[,-1]
return(list(BreastCancer, breast.cancer.y))
}
## Give dataset not in one-hot encoding
# give warning that we are attempting to convert
df.list <- prepare_categorical_breast_cancer()
breast.cancer.x = df.list[[1]]
breast.cancer.y = df.list[[2]]
#######  use BestModel on the categorical data  ######
# Note that both will check if the data is encoded properly
cancer <- getModelComparisons(breast.cancer.x, breast.cancer.y)
expect_equal(cancer$force_prepared, TRUE)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
training_data
object$model_list$svmLinear
devtools::load_all(".")
prepare_categorical_breast_cancer <- function() {
data(BreastCancer)
# remove columns to make the predictions less obvious and faster testing
BreastCancer <- BreastCancer[, c(T, F, F, T, F, T, F, F, F, F, T)]
# remove NA rows
BreastCancer <- na.omit(BreastCancer)
BreastCancer = BreastCancer[complete.cases(BreastCancer), ]
breast.cancer.y = BreastCancer$Class
# No NA's
assertthat::are_equal(0, sum(is.na(BreastCancer)))
# remove the class predictions
BreastCancer = BreastCancer[,-length(BreastCancer)]
# Remove ID column
BreastCancer = BreastCancer[,-1]
return(list(BreastCancer, breast.cancer.y))
}
###### Start by encoding in one hot #########
df.list <- prepare_categorical_breast_cancer()
breast.cancer.x = df.list[[1]]
breast.cancer.y = df.list[[2]]
# one hot encode the data
dmy <- caret::dummyVars(" ~ .", data = breast.cancer.x)
breast.cancer.x <- data.frame(predict(dmy, newdata = breast.cancer.x))
#######  use BestModel on the categorical data  ######
cancer <- getModelComparisons(breast.cancer.x, breast.cancer.y)
expect_equal(cancer$force_prepared, FALSE)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
devtools::load_all(".")
devtools::load_all(".")
View(predict.ModelComparison)
prepare_categorical_breast_cancer <- function() {
data(BreastCancer)
# remove columns to make the predictions less obvious and faster testing
BreastCancer <- BreastCancer[, c(T, F, F, T, F, T, F, F, F, F, T)]
# remove NA rows
BreastCancer <- na.omit(BreastCancer)
BreastCancer = BreastCancer[complete.cases(BreastCancer), ]
breast.cancer.y = BreastCancer$Class
# No NA's
assertthat::are_equal(0, sum(is.na(BreastCancer)))
# remove the class predictions
BreastCancer = BreastCancer[,-length(BreastCancer)]
# Remove ID column
BreastCancer = BreastCancer[,-1]
return(list(BreastCancer, breast.cancer.y))
}
## Give dataset not in one-hot encoding
# give warning that we are attempting to convert
df.list <- prepare_categorical_breast_cancer()
breast.cancer.x = df.list[[1]]
breast.cancer.y = df.list[[2]]
#######  use BestModel on the categorical data  ######
# Note that both will check if the data is encoded properly
cancer <- getModelComparisons(breast.cancer.x, breast.cancer.y)
expect_equal(cancer$force_prepared, TRUE)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
object$.multi_class
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
devtools::load_all(".")
devtools::load_all(".")
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
###### Start by encoding in one hot #########
df.list <- prepare_categorical_breast_cancer()
breast.cancer.x = df.list[[1]]
breast.cancer.y = df.list[[2]]
# one hot encode the data
dmy <- caret::dummyVars(" ~ .", data = breast.cancer.x)
breast.cancer.x <- data.frame(predict(dmy, newdata = breast.cancer.x))
#######  use BestModel on the categorical data  ######
cancer <- getModelComparisons(breast.cancer.x, breast.cancer.y)
expect_equal(cancer$force_prepared, FALSE)
plot(cancer, breast.cancer.y, breast.cancer.x)
## Give dataset not in one-hot encoding
# give warning that we are attempting to convert
df.list <- prepare_categorical_breast_cancer()
breast.cancer.x = df.list[[1]]
breast.cancer.y = df.list[[2]]
#######  use BestModel on the categorical data  ######
# Note that both will check if the data is encoded properly
cancer <- getModelComparisons(breast.cancer.x, breast.cancer.y)
expect_equal(cancer$force_prepared, TRUE)
plot(cancer, breast.cancer.y, breast.cancer.x)
plot(cancer, breast.cancer.y, breast.cancer.x)
devtools::load_all(".")
plot(cancer, breast.cancer.y, breast.cancer.x)
data(iris)
toBeRemoved<-which(iris$Species=="setosa")
irisReal <-iris[-toBeRemoved,]
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
iris_ready = irisReal
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(a, iris_ready[,1:4],iris_ready[,5])
head(iris_ready)
diff_list = a$model_list
names(diff_list) <-  c("Random", "Stuff", "To", "Check", "Errors")
rev(diff_list)
compmod <- convertToComparison(diff_list, multi_class = F)
View(compmod$model_list[[1]])
pred <- predict(compmod, iris_ready[, 1:4])
pred[1]
pred[1]pred
pred
pred <- predict(compmod, iris_ready[, 1:4])
pred
conf.matrix = caret::confusionMatrix(iris_ready[,5], as.factor(round(pred[1][, 1])))
conf.matrix = caret::confusionMatrix(iris_ready[,5], as.factor(round(pred[[1]][, 1])))
as.factor(round(pred[[1]][, 1]))
iris_ready[,5]
levels(as.factor(round(pred[[1]][, 1]))) <- c('versicolor', 'virginica' )
pred <- as.factor(round(pred[[1]][, 1]))
levels(pred) <- c('versicolor', 'virginica' )
conf.matrix = caret::confusionMatrix(iris_ready[,5], pred)
conf.matrix
conf.matrix$overall
pred <- as.factor(round(pred[[1]][, 2]))
levels(pred) <- c('versicolor', 'virginica' )
conf.matrix = caret::confusionMatrix(iris_ready[,5], pred)
conf.matrix$overall
pred <- as.factor(round(pred[[1]][, 2]))
levels(pred) <- c('versicolor', 'virginica' )
conf.matrix = caret::confusionMatrix(iris_ready[,5], pred)
conf.matrix$overall
pred <- as.factor(round(pred[[1]][, 1]))
levels(pred) <- c('versicolor', 'virginica' )
conf.matrix = caret::confusionMatrix(iris_ready[,5], pred)
conf.matrix$overall
conf.matrix$overall["Accuracy"]
titanic <- PrepareNumericTitanic()
devtools::load_all(".")
titanic <- PrepareNumericTitanic()
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="80/20")
PrepareNumericTitanic <- function() {
titanic <- read.csv("~/BestModel/tests/testthat/titanic.csv")
titanic <- titanic[, c("Survived", "Age",
"Siblings.Spouses.Aboard", "Parents.Children.Aboard", "Fare")]
titanic$Survived = as.factor(titanic$Survived)
levels(titanic$Survived) <- c("died", "survived")
return(titanic)
}
titanic <- PrepareNumericTitanic()
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="80/20")
# predict the values for the dataset
pred_list <- predict(comp, titanic[, -1])
# check that there are the same number of predictions as there are models
expect_equal(length(comp$model_list), length(pred_list))
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
source('~/BestModel/R/Visualization.R')
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
source('~/BestModel/R/Visualization.R')
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
source('~/BestModel/R/Visualization.R')
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
PrepareNumericTitanic <- function() {
titanic <- read.csv("~/BestModel/tests/testthat/titanic.csv")
titanic <- titanic[, c("Survived", "Age",
"Siblings.Spouses.Aboard", "Parents.Children.Aboard", "Fare")]
titanic$Survived = as.factor(titanic$Survived)
levels(titanic$Survived) <- c("died", "survived")
return(titanic)
}
test_that("80/20 validation works", {
titanic <- PrepareNumericTitanic()
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="80/20")
# predict the values for the dataset
pred_list <- predict(comp, titanic[, -1])
# check that there are the same number of predictions as there are models
expect_equal(length(comp$model_list), length(pred_list))
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
})
titanic <- PrepareNumericTitanic()
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], validation="80/20")
# predict the values for the dataset
pred_list <- predict(comp, titanic[, -1])
# check that there are the same number of predictions as there are models
expect_equal(length(comp$model_list), length(pred_list))
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
object$accuracy.list
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
object$accuracy.list
object$accuracy.list)
barplot(object$accuracy.list)
barplot(as.matrix(as.data.frame(object$accuracy.list)))
barplot(as.matrix(object$accuracy.list))
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
a
titanic <- PrepareNumericTitanic()
# create the models
comp <- getModelComparisons(titanic[, -1], titanic[, 1], modelList = "all")
# predict the values for the dataset
pred_list <- predict(comp, titanic[, -1])
# check that there are the same number of predictions as there are models
expect_equal(length(comp$model_list), length(pred_list))
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
# ensure plot doesn't have any errors
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
pred
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="accuracy")
conf.matrix
toBeRemoved<-which(iris$Species=="setosa")
irisReal <-iris[-toBeRemoved,]
irisReal <- droplevels(irisReal)
levels(irisReal$Species) <- c('versicolor', 'virginica' )
iris_ready = irisReal
a <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
plot(a, iris_ready[,1:4],iris_ready[,5])
head(iris_ready)
diff_list = a$model_list
names(diff_list) <-  c("Random", "Stuff", "To", "Check", "Errors")
rev(diff_list)
compmod <- convertToComparison(diff_list, multi_class = F)
View(compmod$model_list[[1]])
pred <- predict(compmod, iris_ready[, 1:4])
pred <- predict(compmod, iris_ready[, 1:4])
pred <- as.factor(round(pred[[1]][, 1]))
levels(pred) <- c('versicolor', 'virginica' )
conf.matrix = caret::confusionMatrix(iris_ready[,5], pred)
conf.matrix$overall
conf.matrix$positive
conf.matrix$mode
conf.matrix$dots
conf.matrix$
# create the models
comp <- getModelComparisons(iris_ready[,1:4], iris_ready[,5])
conf.matrix$overall
conf.matrix$byClass
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Precision")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Precision")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Specificity")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Blah")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Blah")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Blah")
devtools::load_all(".")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Blah")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Blah")
devtools::load_all(".")
devtools::load_all(".")
plot(comp, titanic[, 1], titanic[, -1], plot.type="Detection Rate")
comp$accuracy.list
source('~/BestModel/tests/testthat/test_plot_metrics.R')
devtools::load_all(".")
