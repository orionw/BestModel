verbose = T,
allowParallel = T)
fit <- train(as.factor(Day0AB) ~., data = Day0Data,
method = "nnet",
learnFunc = "Std_Backpropagation",
maxit = 1000,
trControl = trctrl,
preProcess = c("center", "scale"),
linout = F,
verbose = T,
allowParallel = T)
fit
fit$bestTune
fit <- train(as.factor(Day0AB) ~., data = Day0Data,
method = "nnet",
learnFunc = "Std_Backpropagation",
learnFuncParams = c(0.4, 0.1),
maxit = 1000,
trControl = trctrl,
preProcess = c("center", "scale"),
linout = F,
verbose = T,
allowParallel = T)
fit
model = fit$finalModel
pred_roc = prediction(model,importantValsTest$eyeDetection)
pred_roc = prediction(model,Day0Data$Day0AB)
model = fit$finalModel
pred_roc = prediction(model,Day0Data$Day0AB)
fit$finalModel
fit <- train(as.factor(Day0AB) ~., data = Day0Data,2:29],
fit <- train(as.factor(Day0AB) ~., data = Day0Data[],2:29],
fit <- train(as.factor(Day0AB) ~., data = Day0Data[,2:29],
method = "nnet",
learnFunc = "Std_Backpropagation",
learnFuncParams = c(0.4, 0.1),
maxit = 1000,
trControl = trctrl,
preProcess = c("center", "scale"),
linout = F,
verbose = T,
allowParallel = T)
model = fit$finalModel
pred_roc = prediction(model,Day0Data$Day0AB)
fit$finalModel
model = fit$finalModel
pred_roc = prediction(model,Day0Data$Day0AB)
pred_roc = prediction(model,Day0Data$Day0AB)[1]
Day0Data
#Choose some columns to coerce to factors:
cols <- colnames(Day0Data)
cols = cols[2:29]
#Use lapply() to coerce and replace the chosen columns:
Day0Data[cols] <- lapply(Day0Data[cols], ordered)
test <- sample_n(Day0Data, 200)
neuralNet <- nnet(as.factor(Day0Data$Day0AB) ~ ., data=Day0Data[,2:29], size=4,decay=5e-2, maxit=50)
# Predictions
pred_nn <- predict(neuralNet, test[,3:29])
cm_nn <- confusionMatrix(table(round(pred_nn), test$Day0AB))
cm_nn$table
save(neuralNet, file = "nnet.RData")
# Training on the test set
test <- sample_n(Day0Data, 200)
neuralNetTest <- nnet(as.factor(test$Day0AB) ~ ., data=test[,2:29], size=3,decay=5e-2, maxit=50)
# DAy0DAta
pred_nn_test <- predict(neuralNetTest, test[,3:29])
cm_nn_test <- confusionMatrix(table(round(pred_nn_test), test$Day0AB))
cm_nn_test$table
count(Day0Data.csdb$D0CSDB.result)
str(Day0Data.csdb)
pred_nn_test <- predict(neuralNetTest, Day0Data.csdb[,2:29])
cm_nn_test <- table(as.factor(round(pred_nn_test)), as.factor(Day0Data.csdb$D0CSDB.result))
dimnames(cm_nn_test)[[1]] = c("1","0")
cm_nn_test <- confusionMatrix(cm_nn_test)
cm_nn_test$table
neuralNetDB <- nnet(as.factor(Day0Data.csdb$D0CSDB.result) ~ ., data=Day0Data.csdb[,2:29], size=3,decay=5e-2, maxit=150)
pred_nn_test <- predict(neuralNetDB, Day0Data.csdb[,2:29])
cm_nn_test <- table(as.factor(round(pred_nn_test)), as.factor(Day0Data.csdb$D0CSDB.result))
dimnames(cm_nn_test)[[1]] = c("1","0")
cm_nn_test <- confusionMatrix(cm_nn_test)
cm_nn_test$table
str(Day0)
model = fit$finalModel[0]
pred_roc = prediction(model,Day0Data$Day0AB)
model = fit$finalModel$fitted.values
pred_roc = prediction(model,Day0Data$Day0AB)
auc.perf = performance(pred_roc, measure = "auc")
auc.perf@y.values
memory <- read.table(header = TRUE, text="Major,Student,Test,Wordlist,Distracter,Score,Student2,Student3
Math,1,1,abstract,poetry,6,1,1
Math,1,2,abstract,math,8,1,2
Math,1,3,concrete,poetry,8,1,3
Math,1,4,concrete,math,11,1,4
Math,2,5,abstract,poetry,5,2,5
Math,2,6,abstract,math,8,2,6
Math,2,7,concrete,poetry,8,2,7
Math,2,8,concrete,math,10,2,8
Math,3,9,abstract,poetry,7,3,9
Math,3,10,abstract,math,10,3,10
Math,3,11,concrete,poetry,9,3,11
Math,3,12,concrete,math,10,3,12
CS,4,13,abstract,poetry,9,1,13
CS,4,14,abstract,math,12,1,14
CS,4,15,concrete,poetry,10,1,15
CS,4,16,concrete,math,13,1,16
CS,5,17,abstract,poetry,4,2,17
CS,5,18,abstract,math,8,2,18
CS,5,19,concrete,poetry,8,2,19
CS,5,20,concrete,math,9,2,20
CS,6,21,abstract,poetry,7,3,21
CS,6,22,abstract,math,8,3,22
CS,6,23,concrete,poetry,5,3,23
CS,6,24,concrete,math,8,3,24
Hist,7,25,abstract,poetry,8,1,25
Hist,7,26,abstract,math,7,1,26
Hist,7,27,concrete,poetry,9,1,27
Hist,7,28,concrete,math,10,1,28
Hist,8,29,abstract,poetry,7,2,29
Hist,8,30,abstract,math,6,2,30
Hist,8,31,concrete,poetry,10,2,31
Hist,8,32,concrete,math,8,2,32
Hist,9,33,abstract,poetry,5,3,33
Hist,9,34,abstract,math,4,3,34
Hist,9,35,concrete,poetry,7,3,35
Hist,9,36,concrete,math,7,3,36
Eng,10,37,abstract,poetry,10,1,37
Eng,10,38,abstract,math,9,1,38
Eng,10,39,concrete,poetry,10,1,39
Eng,10,40,concrete,math,8,1,40
Eng,11,41,abstract,poetry,9,2,41
Eng,11,42,abstract,math,4,2,42
Eng,11,43,concrete,poetry,9,2,43
Eng,11,44,concrete,math,8,2,44
Eng,12,45,abstract,poetry,10,3,45
Eng,12,46,abstract,math,7,3,46
Eng,12,47,concrete,poetry,8,3,47
Eng,12,48,concrete,math,8,3,48")
str(memory)
memory <- read.table(header = TRUE,sep="," text="Major,Student,Test,Wordlist,Distracter,Score,Student2,Student3
Math,1,1,abstract,poetry,6,1,1
Math,1,2,abstract,math,8,1,2
Math,1,3,concrete,poetry,8,1,3
Math,1,4,concrete,math,11,1,4
Math,2,5,abstract,poetry,5,2,5
Math,2,6,abstract,math,8,2,6
Math,2,7,concrete,poetry,8,2,7
Math,2,8,concrete,math,10,2,8
Math,3,9,abstract,poetry,7,3,9
Math,3,10,abstract,math,10,3,10
Math,3,11,concrete,poetry,9,3,11
Math,3,12,concrete,math,10,3,12
CS,4,13,abstract,poetry,9,1,13
CS,4,14,abstract,math,12,1,14
CS,4,15,concrete,poetry,10,1,15
CS,4,16,concrete,math,13,1,16
CS,5,17,abstract,poetry,4,2,17
CS,5,18,abstract,math,8,2,18
CS,5,19,concrete,poetry,8,2,19
CS,5,20,concrete,math,9,2,20
CS,6,21,abstract,poetry,7,3,21
CS,6,22,abstract,math,8,3,22
CS,6,23,concrete,poetry,5,3,23
CS,6,24,concrete,math,8,3,24
Hist,7,25,abstract,poetry,8,1,25
Hist,7,26,abstract,math,7,1,26
Hist,7,27,concrete,poetry,9,1,27
Hist,7,28,concrete,math,10,1,28
Hist,8,29,abstract,poetry,7,2,29
Hist,8,30,abstract,math,6,2,30
Hist,8,31,concrete,poetry,10,2,31
Hist,8,32,concrete,math,8,2,32
Hist,9,33,abstract,poetry,5,3,33
Hist,9,34,abstract,math,4,3,34
Hist,9,35,concrete,poetry,7,3,35
Hist,9,36,concrete,math,7,3,36
Eng,10,37,abstract,poetry,10,1,37
Eng,10,38,abstract,math,9,1,38
Eng,10,39,concrete,poetry,10,1,39
Eng,10,40,concrete,math,8,1,40
Eng,11,41,abstract,poetry,9,2,41
Eng,11,42,abstract,math,4,2,42
Eng,11,43,concrete,poetry,9,2,43
Eng,11,44,concrete,math,8,2,44
Eng,12,45,abstract,poetry,10,3,45
Eng,12,46,abstract,math,7,3,46
Eng,12,47,concrete,poetry,8,3,47
Eng,12,48,concrete,math,8,3,48")
memory <- read.table(header = TRUE, sep=",", text="Major,Student,Test,Wordlist,Distracter,Score,Student2,Student3
Math,1,1,abstract,poetry,6,1,1
Math,1,2,abstract,math,8,1,2
Math,1,3,concrete,poetry,8,1,3
Math,1,4,concrete,math,11,1,4
Math,2,5,abstract,poetry,5,2,5
Math,2,6,abstract,math,8,2,6
Math,2,7,concrete,poetry,8,2,7
Math,2,8,concrete,math,10,2,8
Math,3,9,abstract,poetry,7,3,9
Math,3,10,abstract,math,10,3,10
Math,3,11,concrete,poetry,9,3,11
Math,3,12,concrete,math,10,3,12
CS,4,13,abstract,poetry,9,1,13
CS,4,14,abstract,math,12,1,14
CS,4,15,concrete,poetry,10,1,15
CS,4,16,concrete,math,13,1,16
CS,5,17,abstract,poetry,4,2,17
CS,5,18,abstract,math,8,2,18
CS,5,19,concrete,poetry,8,2,19
CS,5,20,concrete,math,9,2,20
CS,6,21,abstract,poetry,7,3,21
CS,6,22,abstract,math,8,3,22
CS,6,23,concrete,poetry,5,3,23
CS,6,24,concrete,math,8,3,24
Hist,7,25,abstract,poetry,8,1,25
Hist,7,26,abstract,math,7,1,26
Hist,7,27,concrete,poetry,9,1,27
Hist,7,28,concrete,math,10,1,28
Hist,8,29,abstract,poetry,7,2,29
Hist,8,30,abstract,math,6,2,30
Hist,8,31,concrete,poetry,10,2,31
Hist,8,32,concrete,math,8,2,32
Hist,9,33,abstract,poetry,5,3,33
Hist,9,34,abstract,math,4,3,34
Hist,9,35,concrete,poetry,7,3,35
Hist,9,36,concrete,math,7,3,36
Eng,10,37,abstract,poetry,10,1,37
Eng,10,38,abstract,math,9,1,38
Eng,10,39,concrete,poetry,10,1,39
Eng,10,40,concrete,math,8,1,40
Eng,11,41,abstract,poetry,9,2,41
Eng,11,42,abstract,math,4,2,42
Eng,11,43,concrete,poetry,9,2,43
Eng,11,44,concrete,math,8,2,44
Eng,12,45,abstract,poetry,10,3,45
Eng,12,46,abstract,math,7,3,46
Eng,12,47,concrete,poetry,8,3,47
Eng,12,48,concrete,math,8,3,48")
str(memory)
# Boxplot
boxplot(score~Wordlist+Distractor, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
# Boxplot
boxplot(score~Wordlist+Distracter, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
length(memory$Wordlist)
# Boxplot
boxplot(Score~Wordlist+Distracter, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
library(lattice)
dotplot(Score~Wordlist+Distracter, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
dotplot(Score~Wordlist+Distracter, data=memory, ylab="Time in Air (s)", xlab="Factor Type", jitter.y=T)
anova(aov(Score~Wordlist+Distracter+Distractor*Wordlist, data=memory))
anova(aov(Score~Wordlist+Distracter+Distracter*Wordlist, data=memory))
memory$resids = resid(aov(Score~Wordlist+Distracter+Distracter*Wordlist, data=memory))
# Make normal qq plot to check normality
qqnorm(memory$resids)
qqline(memory$resids)
# Make normal qq plot to check normality
qqnorm(memory$resids)
plot(paper$resids, type="b")
abline(h=0)
#blocking
anova(aov(Score~Wordlist+Distracter+Distracter*Wordlist+Student, data=memory))
plot(memory$resids, type="b")
abline(h=0)
boxplot(Score~student, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
boxplot(Score~Student, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
qqnorm(memory$resids)
qqline(memory$resids)
boxplot(Score~Student, data=memory, ylab="Time in Air (s)", xlab="Factor Type")
plot(memory$resids, type="b")
abline(h=0)
str(memory)
#blocking
anova(aov(Score~Wordlist+Distracter+Distracter*Wordlist+as.factor(Student), data=memory))
boxplot(Score~as.factor(Student), data=memory, ylab="Time in Air (s)", xlab="Factor Type")
#blocking
anova(aov(Score~Wordlist+Distracter+Distracter*Wordlist+as.factor(Student), data=memory))
#blocking
anova(aov(Score~Wordlist+Distracter+Distracter*Wordlist+as.factor(Student), data=memory))
source('C:/Users/orion/Desktop/OARS/OARS/predictive models for OARS.R', echo=TRUE)
#ROC curves for models
library(pROC)
#two factor model with glm
tf.train <- sample_n(Day0OARS, 1100)
tf.test <- sample_n(Day0OARS, 400)
two.factor <- glm(Day0actual ~ AB_RISK + EL_RISK, data = tf.train, family = "binomial")
summary(two.factor)
tf.preds <- predict(two.factor, newdata = tf.test)
roc.tf <- roc(tf.test$Day0actual, tf.preds)
plot(roc.tf, col = "blue")
auc(roc.tf)
#glm model by all items
pred <- predict(model, newdata = UDTtest)
roc.1 <- roc(UDTtest$Day0AB, pred)
plot(roc.1, col = "red", add = T)
auc(roc.1)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
# Neural Net
nnet <- loadRData("nnet.RData")
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
#plot(roc.0, add = T, col = "brown")
pROC::auc(roc.0)
#svm tuned model
pred2 <- (predict(svm1, newdata = UDTtest, decision.values = T))
pred2 <- as.array(pred2)
pred2 <- attr(pred2, "decision.values")
pred2 <- as.vector(pred2)
roc.2 <- roc(UDTtest$Day0AB, pred2)
plot(roc.2, add = T, col = "green")
auc(roc.2)
#test on different partition of data
pred3 <- predict(svm1, newdata = UDTtest3, decision.values = T)
pred3 <- as.array(pred3)
pred3 <- attr(pred3, "decision.values")
pred3 <- as.vector(pred3)
roc.3 <- roc(UDTtest3$Day0AB, pred3)
plot(roc.3, add = T, col = "yellow")
auc(roc.3)
#start from scratch to rebuild the svm model with same params
set.seed(1234)
svm.train <- sample_n(Day0Data, 1100)
svm.test <- sample_n(Day0Data, 400)
svm.validate <- svm(Day0AB ~., data = svm.train,
kernel = "radial",
cost = 4,
gamma = 0.01176471,
type = "C-classification",
degree = 3,
nu = 0.5,
cross = 10)
#ROC
pred4 <- predict(svm.validate, newdata = svm.test, decision.values = T)
pred4 <- as.array(pred4)
pred4 <- attr(pred4, "decision.values")
pred4 <- as.vector(pred4)
roc.4 <- roc(svm.test$Day0AB, pred4)
plot(roc.4, add = T, col = "purple")
auc(roc.4)
#Try with M6 data
pred5 <- predict(svm.validate, newdata = M6Data, decision.values = T)
pred5 <- as.array(pred5)
pred5 <- attr(pred5, "decision.values")
pred5 <- as.vector(pred5)
roc.5 <- roc(M6Data$M6AB, pred5)
plot(roc.5, add = T, col = "orange")
auc(roc.5)
#adjust the threshold
pred5 <- predict(svm.validate, newdata = test.udt1, decision.values = T)
predpred5 <- as.array(pred5)
pred5 <- attr(pred5, "decision.values")
fitted.svm.validate <- ifelse(pred5 >  .9, 0, 1)
table <- table(data.frame(true_values= test.udt1$Day0AB, predictions = fitted.svm.validate))
table
plot(table, type = "h", ylab = "Predicted Values", xlab = "True Values", main = "Pred vs Actual UDT AB", col = "grey")
confusionMatrix(as.factor(fitted.svm.validate), test.udt1$Day0AB)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
#Validation using different sampling method
#set seed and recreate svm1
set.seed(0528)
library(dataPreparation)
train_index1 <- sample(1:nrow(Day0Data), 0.7*nrow(Day0Data))
test_index1 <- setdiff(1:nrow(Day0Data), train_index)
train.udt1 <- Day0Data[train_index1,]
test.udt1 <- Day0Data[test_index1,]
library(e1071)
svm.validate1 <- svm(Day0AB ~., data = train.udt1,
kernel = "radial",
cost = 4,
gamma = 0.01176471,
type = "C-classification",
degree = 3,
nu = 0.5,
cross = 10)
pred11 <- predict(svm.validate1, newdata = test.udt1, decision.values = T)
pred11 <- as.array(pred11)
pred11 <- attr(pred11, "decision.values")
pred11 <- as.vector(pred11)
library(pROC)
roc.11 <- roc(test.udt1$Day0AB, pred11)
plot(roc.11, col = "purple")
auc(roc.11)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
library(pROC)
roc.11 <- roc(test.udt1$Day0AB, pred11)
plot(roc.11, col = "purple")
auc(roc.11)
plot(roc.0, col = "yellow", add=T)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
# Neural Net
nnet <- loadRData("nnet.RData")
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
#plot(roc.0, add = T, col = "brown")
pROC::auc(roc.0)
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
plot(roc.0, col = "yellow", add=T)
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
# Neural Net
nnet <- loadRData("nnet.RData")
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
# Neural Net
nnet <- loadRData("nnet.RData")
# Neural Net
nnet <- loadRData("nnet.RData")
ls
ls()
# Neural Net
nnet <- loadRData("nnet.RData")
cwd()
pwd()
# Neural Net
nnet <- loadRData("~/OARS/OARS/net.RData")
# Neural Net
nnet <- loadRData("C\Users\orion\Desktop\OARS\OARS/net.RData")
# Neural Net
nnet <- loadRData("C/Users/orion/Desktop/OARS/OARS/net.RData")
# Neural Net
nnet <- loadRData("C/Users/orion/Desktop/OARS/OARS/net.RData")
# Neural Net
list.files(R.home())
getwd()
# Neural Net
nnet <- loadRData("C:/Users/orion/Desktop/OARS/OARS/net.RData")
# Neural Net
list.files("C:/Users/orion/Desktop/OARS/OARS")
nnet <- loadRData("C:/Users/orion/Desktop/OARS/OARS/net.RData")
nnet <- loadRData("C:/Users/orion/Desktop/OARS/OARS/nnet.RData")
nnetPred <- predict(nnet, newdata = UDTtest3, type="raw")
roc.0 <- roc(UDTtest3$Day0AB, nnetPred)
#plot(roc.0, add = T, col = "brown")
pROC::auc(roc.0)
#svm tuned model
pred2 <- (predict(svm1, newdata = UDTtest, decision.values = T))
#Plot ROC curves side by side
plot(roc.tf, col = "blue")
plot(roc.0, col = "yellow", add=T)
plot(roc.1, col = "red", add = T)
plot(roc.2, add = T, col = "green")
plot(roc.11, add = T, col = "purple")
legend("bottomright",legend = c("Two-Factor (0.5825)","Full GLM (0.6841)", "SVM1 (0.7553)", "*SVM validate1 (0.7581)", "Neural Net (.8242)"), cex = .7,
col = c("blue", "red", "green", "purple"), lty = c(1), ncol = 1, text.font = 4, box.lty = 0)
sample(1:16, 3, replace=TRUE)
sample(1:16, 16, replace=TRUE)
sample(1:16, 16, replace=F)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("parent_directory")
create("BestModel")
install.packages("devtools")
install.packages("roxygen2")
setwd("parent_directory")
create("BestModel")
ls
ls()
setwd("~/")
setwd("~/BestModel")
create("BestModel")
devtools::create("BestModel")
setwd("~/")
devtools::create("BestModel")
devtools::create("BestModel")
install.packages("ps")
devtools::create("BestModel")
setwd("./BestModel")
document()
devtools::document()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::document()
